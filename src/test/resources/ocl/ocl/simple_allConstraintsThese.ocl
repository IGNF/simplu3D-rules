package  fr::ign::cogit::simplu3d::model::application




-- Aire d'une sous parcelle positive
context AbstractBuilding inv:
Sequence{'Habitation', 'Bureau' , 'Commerce', 'Artisanat'}->includes(self.destination)

context AbstractBuilding inv:
Sequence{'Garage'}->includes(self.destination) and Prescription_SURF.allInstances().select(type=8).exists(p | p.geom.intersects(self.footprint)) implies self.height(1, 2) < 3


context BasicPropertyUnit inv:
self.getCadastralParcel().getSubParcel().getSpecificCadastralBoundary()->select(b | b.type = 'FRONT' and  b.geom.length()>4.5)->notEmpty()


context SubParcel inv:
let geomL :Sequence(IGeometry)=self.getSpecificCadastralBoundary()->select(b | b.type = 'FRONT' and b.getAlignement()->isEmpty() and b.getRecoil()->isEmpty()).geom in
let geomB :Bag(IOrientableSurface)=self.getBuildingsParts().footprint in
geomB->forAll(gB | geomL->forAll(gL | gL.distance(gB) > 1.5))


context SubParcel inv:
let recoils :Sequence(Recoil)=self.getSpecificCadastralBoundary().getRecoil() in
let geomB :Bag(IOrientableSurface)=self.getBuildingsParts().footprint in
geomB->forAll(gB | recoils->forAll(rec | gB.distance(rec.getObjRef().getGeom()) > rec.getDistance()))



context SubParcel inv:
let alignements :Sequence(Alignement)=self.getSpecificCadastralBoundary().getAlignement() in
let geomB :Bag(IOrientableSurface)=self.getBuildingsParts().footprint in
geomB->forAll(gB | alignements->forAll(ali | gB.distance(ali.getGeom()) > 0))


context AbstractBuilding inv:
self.destination <> 'Garage' implies  PublicSpace.allInstances().select(type='SNCF').geom->forAll(g |g.distance(self.footprint) > 25)

context SubParcel inv:
let pInter = Prescription_SURF.allInstances().select(p | p.type=26 and p.geom.intersects(self.geom)) in
if (pInter->isEmpty()) then
    PublicSpace.allInstances().select(type='Canal')->forAll(c | self.getBuildingsParts()->forAll(bp | c.geom.distance(bp.footprint) > 12))
else
    pInter->forAll(p | self.getBuildingsParts()->forAll(bp | not p.geom.intersects(bp.footprint)))
endif

context SubParcel inv:
let lBPNeigh : Sequence(AbstractBuilding)= self.getSpecificCadastralBoundary().select(type='LAT').getFeatAdj().oclAsType(CadastralParcel).getSubParcel().getBuildingsParts()->select(bP | bP.footprint.contains(self.geom)) in
let occupGable : Integer= lBPNeigh.getRoofSurface().getGable()->select(g |self.getBuildingsParts().getRoofSurface().getGable() ->exists(g2 | g.contains(g2))) ->size() in
if occupGable = lBPNeigh ->size() then 
true 
else 
self.getBuildingsParts() = occupGable 
endif

context SubParcel inv:
self.getSpecificCadastralBoundary().select(type<>'FIC').geom ->forAll(g |
self.getBuildingsParts().footprint .distance(g)->min() > 1.9)

context SubParcel inv:
self.getBuildingsParts().bandEpsilon(self.getConsLine(), 0, 13).forAll(bP |
self.getSpecificCadastralBoundary().select(type<>'FIC').geom.forAll(g | bP.prospect(g,0,0.5)))

context SubParcel inv:
self.getBuildingsParts().bandEpsilon(self.getConsLine(), 20, 1).forAll(bP | self.getSpecificCadastralBoundary().select(type='BACK' or type='LAT').geom.forAll(g | bP.prospect(g,0,0.5)))

context SubParcel inv:
self.getSpecificCadastralBoundary().select(type='BACK' or type='LAT').geom->forAll(g |self.getBuildingsParts().bandEpsilon(self.getConsLine(), 20, 1).footprint.distance(g)->min() > 3)

--.select(b | f.isInPositiveSpace(b.geom))
context BasicPropertyUnit inv:
self.getBuildings().getFacades().select(isWindowLess)->forAll(f | self.getBuildings().forAll(b | b.prospect(f.geom,0,2)))

context SubParcel inv:
self.builtRatio() <= 0.8

context SubParcel inv:
if self.getBuildingsParts()->forAll(b | b.height(1, 2) < 3.5 ) then
self.builtRatio() <= 0.55
else
self.builtRatio() <= 0.5
endif


context BuildingPart inv:
Sequence{'Bureau' , 'Habitation'}->includes(self.destination) implies self.height(2,
0) + 8 <= self.height(2,1)

context SubParcel inv:
self.getBuildingsParts().height(2, 0)->forAll(h|h<28)

endpackage